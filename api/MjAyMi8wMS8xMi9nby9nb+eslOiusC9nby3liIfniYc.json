{"title":"go-切片","date":"2022-01-12T17:41:50.000Z","date_formatted":{"ll":"Jan 12, 2022","L":"01/12/2022","MM-DD":"01-12"},"thumbnail":"img/golang.png","color":"#111","link":"2022/01/12/go/go笔记/go-切片","comments":true,"tags":["go"],"categories":["go"],"updated":"2022-04-04T14:16:50.572Z","content":"<blockquote>\n<p>《架构整洁之道》,软件架构的终极目标是，用最小的人力成本来满足构建和维护系统需求</p>\n</blockquote>\n<span id=\"more\"></span>\n<p>[toc]</p>\n<h1 id=\"array\">array<a title=\"#array\" href=\"#array\"></a></h1>\n<p>数组声明的时候需要指定大小，例如</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array [<span class=\"number\">10</span>]<span class=\"type\">int</span></span><br></pre></td></tr></table></figure>\n<p>数组是值类型，并且大小是类型的一部分，例如</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">3</span>]<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;</span><br><span class=\"line\">fmt.Println(reflect.ValueOf(a).Type())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &gt;&gt;&gt; [3]int</span></span><br></pre></td></tr></table></figure>\n<p>数组按照值传递方式，实际是传递的值副本</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">test</span><span class=\"params\">(i [3]<span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// i的地址与a不一致</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">test1</span><span class=\"params\">(i []<span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = [<span class=\"number\">3</span>]<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;</span><br><span class=\"line\">    test(a) <span class=\"comment\">// 可以，i的地址与a不一致</span></span><br><span class=\"line\">    test1(a) <span class=\"comment\">// 报错，因为类型不一致</span></span><br><span class=\"line\">    test1(a[:]) <span class=\"comment\">// 可以，i的地址与a一致 </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"slice\">slice<a title=\"#slice\" href=\"#slice\"></a></h1>\n<p>slice并不是单纯的一个指向数组的指针，它是一个结构体（包含：指针，长度，容量）</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">make</span>([]<span class=\"type\">int</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>)</span><br></pre></td></tr></table></figure>\n<p>上述语句对应的slice结构如下，开辟了连续的6个int类型的地址空间，并初始化了前四个空间<br>\n<img src=\"D:%5Cwork%5C%E5%B7%A5%E4%BD%9C%E6%96%87%E4%BB%B6%5C%E5%AD%A6%E4%B9%A0%E6%96%87%E4%BB%B6%5Cgo%E5%AD%A6%E4%B9%A0%5Cmedia%5C16194407503590.jpg\" alt=\"\" loading=\"lazy\"></p>\n<p>len: slice中包含的元素数量<br>\ncap: 从第一个元素开始，到其底层数据元素末尾的个数</p>\n<h2 id=\"slice是否是引用传递？\">slice是否是引用传递？<a title=\"#slice是否是引用传递？\" href=\"#slice是否是引用传递？\"></a></h2>\n<p>slice本身是一个结构体，slice本身是值传递，但是其指向的data是引用传递</p>\n<h2 id=\"append操作\">append操作<a title=\"#append操作\" href=\"#append操作\"></a></h2>\n<p>根据不同的场景，append之后如果：</p>\n<ol>\n<li><code>len&gt;cap</code> &amp;&amp; <code>cap &lt;= 1024</code>: 将从新开辟大小为<code>2*cap</code>的data地址空间</li>\n<li><code>len&gt;cap</code> &amp;&amp; <code>cap &gt; 1024</code>: 将从新开辟大小为<code>1.25*cap</code>的data地址空间，但根据内存对齐结果不是绝对的1.25</li>\n<li><code>len&lt;cap</code> data地址不变</li>\n</ol>\n<p>针对1，2，开辟新的data空间之后，将old空间的值拷贝过来，并将新的地址空间首地址赋值给data，原有地址空间不被破坏</p>\n<p>参考如下示例</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> s = <span class=\"built_in\">make</span>([]<span class=\"type\">int</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">\tprintSlice(s)</span><br><span class=\"line\">\ts = <span class=\"built_in\">append</span>(s, <span class=\"number\">1</span>)</span><br><span class=\"line\">\tprintSlice(s)</span><br><span class=\"line\">\ts = <span class=\"built_in\">append</span>(s, <span class=\"number\">1</span>)</span><br><span class=\"line\">\tprintSlice(s)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">printSlice</span><span class=\"params\">(s []<span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;len=%d cap=%d ptr=%d %v\\n&quot;</span>, <span class=\"built_in\">len</span>(s), <span class=\"built_in\">cap</span>(s), &amp;s[<span class=\"number\">0</span>], s)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* output</span></span><br><span class=\"line\"><span class=\"comment\">len=1 cap=2 ptr=824633836352 [0]</span></span><br><span class=\"line\"><span class=\"comment\">len=2 cap=2 ptr=824633836352 [0 1]</span></span><br><span class=\"line\"><span class=\"comment\">len=3 cap=4 ptr=824633819776 [0 1 1]</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"nil与空切片\">NIL与空切片<a title=\"#nil与空切片\" href=\"#nil与空切片\"></a></h2>\n<blockquote>\n<p>NILL的slice特指slice的data空间为nil，而slice本身对应的结构体是存在的</p>\n</blockquote>\n<p>声明一个NIL的slice，内部赋值如下</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = []<span class=\"type\">int</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"D:%5Cwork%5C%E5%B7%A5%E4%BD%9C%E6%96%87%E4%BB%B6%5C%E5%AD%A6%E4%B9%A0%E6%96%87%E4%BB%B6%5Cgo%E5%AD%A6%E4%B9%A0%5Cmedia%5C16194424361165.jpg\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p>声明一个(多个)空切片，内部赋值如下</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s1 = <span class=\"built_in\">make</span>([]<span class=\"type\">int</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> s2 = <span class=\"built_in\">make</span>([]<span class=\"type\">int</span>, <span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n<p><img src=\"D:%5Cwork%5C%E5%B7%A5%E4%BD%9C%E6%96%87%E4%BB%B6%5C%E5%AD%A6%E4%B9%A0%E6%96%87%E4%BB%B6%5Cgo%E5%AD%A6%E4%B9%A0%5Cmedia%5C16194426593673.jpg\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p>通过上述描述，可以发现其底层机制不太一样，在具体的使用过程中的区别体现在</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s1 []<span class=\"type\">int</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> s2 = <span class=\"built_in\">make</span>([]<span class=\"type\">int</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">s1 == <span class=\"literal\">nil</span> # <span class=\"literal\">true</span></span><br><span class=\"line\">s2 == <span class=\"literal\">nil</span> # <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">len</span>(s1) == <span class=\"number\">0</span> # <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"built_in\">len</span>(s2) == <span class=\"number\">0</span> # <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">s1 = <span class=\"built_in\">append</span>(s1, <span class=\"number\">1</span>) <span class=\"comment\">// yes</span></span><br><span class=\"line\">s2 = <span class=\"built_in\">append</span>(s2, <span class=\"number\">1</span>) <span class=\"comment\">// yes</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"keyword\">range</span> s1 &#123;&#125; <span class=\"comment\">// yes</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> rang s2 &#123;&#125; <span class=\"comment\">// yes</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p> </p>\n<p>另外，在json编码的时候会有区别</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s1 []<span class=\"type\">int</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> s2 = <span class=\"built_in\">make</span>([]<span class=\"type\">int</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">json.Marshal(s1) <span class=\"comment\">// null</span></span><br><span class=\"line\">json.Marshal(s2) <span class=\"comment\">// []</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"切片\">切片<a title=\"#切片\" href=\"#切片\"></a></h2>\n<p><img src=\"D:%5Cwork%5C%E5%B7%A5%E4%BD%9C%E6%96%87%E4%BB%B6%5C%E5%AD%A6%E4%B9%A0%E6%96%87%E4%BB%B6%5Cgo%E5%AD%A6%E4%B9%A0%5Cmedia%5C16194928620640.jpg\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p>上述示意图对应的代码示例如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> s = <span class=\"built_in\">make</span>([]<span class=\"type\">int</span>, <span class=\"number\">0</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\">\ts = <span class=\"built_in\">append</span>(s, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">\ts1 := s[:<span class=\"number\">6</span>]</span><br><span class=\"line\">\ts2 := s[<span class=\"number\">1</span>:<span class=\"number\">4</span>]</span><br><span class=\"line\">\ts3 := s[:<span class=\"number\">0</span>]</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;s (addr: %p): %+8v\\n&quot;</span>,</span><br><span class=\"line\">\t\t&amp;s, *(*reflect.SliceHeader)(unsafe.Pointer(&amp;s)))</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;s1 (addr: %p): %+8v\\n&quot;</span>,</span><br><span class=\"line\">\t\t&amp;s1, *(*reflect.SliceHeader)(unsafe.Pointer(&amp;s1)))</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;s2 (addr: %p): %+8v\\n&quot;</span>,</span><br><span class=\"line\">\t\t&amp;s1, *(*reflect.SliceHeader)(unsafe.Pointer(&amp;s2)))</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;s3 (addr: %p): %+8v\\n&quot;</span>,</span><br><span class=\"line\">\t\t&amp;s1, *(*reflect.SliceHeader)(unsafe.Pointer(&amp;s3)))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>特别注意，新的切片和原切片共享地址空间，注意写陷阱，例如<code>s[2]=10</code> 会同时影响s,s1,s2,s3</p>\n</blockquote>\n<h2 id=\"浅拷贝和深拷贝\">浅拷贝和深拷贝<a title=\"#浅拷贝和深拷贝\" href=\"#浅拷贝和深拷贝\"></a></h2>\n<h3 id=\"浅拷贝\">浅拷贝<a title=\"#浅拷贝\" href=\"#浅拷贝\"></a></h3>\n<p>浅拷贝参考上述<a href=\"#%E5%88%87%E7%89%87\">切片</a></p>\n<h3 id=\"深拷贝\">深拷贝<a title=\"#深拷贝\" href=\"#深拷贝\"></a></h3>\n<p><img src=\"D:%5Cwork%5C%E5%B7%A5%E4%BD%9C%E6%96%87%E4%BB%B6%5C%E5%AD%A6%E4%B9%A0%E6%96%87%E4%BB%B6%5Cgo%E5%AD%A6%E4%B9%A0%5Cmedia%5C16194950236317.jpg\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> s = []<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> d = <span class=\"built_in\">make</span>([]<span class=\"type\">int</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> d1 = <span class=\"built_in\">make</span>([]<span class=\"type\">int</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> d2 = <span class=\"built_in\">make</span>([]<span class=\"type\">int</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> d4 []<span class=\"type\">int</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> d5 = <span class=\"built_in\">make</span>([]<span class=\"type\">int</span>, <span class=\"number\">0</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">copy</span>(d, s)<span class=\"built_in\">copy</span>(d1, s)<span class=\"built_in\">copy</span>(d2, s)<span class=\"built_in\">copy</span>(d4, s)<span class=\"built_in\">copy</span>(d5, s)fmt.Printf(<span class=\"string\">&quot;s (addr: %p)(v: %+v): %+8v\\n&quot;</span>,\t&amp;s, s, *(*reflect.SliceHeader)(unsafe.Pointer(&amp;s)))fmt.Printf(<span class=\"string\">&quot;d (addr: %p)(v: %+v): %+8v\\n&quot;</span>,\t&amp;d, d, *(*reflect.SliceHeader)(unsafe.Pointer(&amp;d)))fmt.Printf(<span class=\"string\">&quot;d1 (addr: %p)(v: %+v): %+8v\\n&quot;</span>,\t&amp;d1, d1, *(*reflect.SliceHeader)(unsafe.Pointer(&amp;d1)))fmt.Printf(<span class=\"string\">&quot;d2 (addr: %p)(v: %+v): %+8v\\n&quot;</span>,\t&amp;d2, d2, *(*reflect.SliceHeader)(unsafe.Pointer(&amp;d2)))fmt.Printf(<span class=\"string\">&quot;d4 (addr: %p)(v: %+v): %+8v\\n&quot;</span>,\t&amp;d4, d4, *(*reflect.SliceHeader)(unsafe.Pointer(&amp;d4)))fmt.Printf(<span class=\"string\">&quot;d5 (addr: %p)(v: %+v): %+8v\\n&quot;</span>,\t&amp;d5, d5, *(*reflect.SliceHeader)(unsafe.Pointer(&amp;d5)))</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*output</span></span><br><span class=\"line\"><span class=\"comment\">s  (addr: 0xc00000c060)(v: [1 2 3]):   &#123;Data:824633811360 Len:       3 Cap:       3&#125;</span></span><br><span class=\"line\"><span class=\"comment\">d  (addr: 0xc00000c080)(v: [1 2 3]):   &#123;Data:824633811392 Len:       3 Cap:       3&#125;</span></span><br><span class=\"line\"><span class=\"comment\">d1 (addr: 0xc00000c0a0)(v: [1 2]):     &#123;Data:824633827472 Len:       2 Cap:       2&#125;</span></span><br><span class=\"line\"><span class=\"comment\">d2 (addr: 0xc00000c0c0)(v: [1 2 3 0]): &#123;Data:824633811424 Len:       4 Cap:       4&#125;</span></span><br><span class=\"line\"><span class=\"comment\">d4 (addr: 0xc00000c0e0)(v: []):        &#123;Data:           0 Len:       0 Cap:       0&#125;</span></span><br><span class=\"line\"><span class=\"comment\">d5 (addr: 0xc00000c100)(v: []):        &#123;Data:824633811456 Len:       0 Cap:       3&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><code>var s = []int</code>, <code>var s = make([]int, 0, 3)</code> 都会导致拷贝失效，因为copy是基于目的列表的Len进行拷贝 实际中的深拷贝要复杂的多,<br>\n参考如下代码</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gotype S <span class=\"keyword\">struct</span> &#123;\tA []<span class=\"type\">int</span>\tB []<span class=\"type\">string</span>&#125;<span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;\t<span class=\"keyword\">var</span> src = []S&#123;&#123;A: []<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>&#125;, B: []<span class=\"type\">string</span>&#123;<span class=\"string\">&quot;B&quot;</span>&#125;&#125;&#125;\t<span class=\"keyword\">var</span> dest = <span class=\"built_in\">make</span>([]S, <span class=\"number\">1</span>)\t<span class=\"built_in\">copy</span>(dest, src)\tfmt.Printf(<span class=\"string\">&quot;src       (addr: %p): %+8v\\n&quot;</span>,\t\t&amp;src, *(*reflect.SliceHeader)(unsafe.Pointer(&amp;src)))\tfmt.Printf(<span class=\"string\">&quot;dest      (addr: %p): %+8v\\n&quot;</span>,\t\t&amp;dest, *(*reflect.SliceHeader)(unsafe.Pointer(&amp;dest)))\tfmt.Printf(<span class=\"string\">&quot;src[0].A  (addr: %p): %+8v\\n&quot;</span>,\t\t&amp;src[<span class=\"number\">0</span>].A, *(*reflect.SliceHeader)(unsafe.Pointer(&amp;src[<span class=\"number\">0</span>].A)))\tfmt.Printf(<span class=\"string\">&quot;dest[0].A (addr: %p): %+8v\\n&quot;</span>,\t\t&amp;dest[<span class=\"number\">0</span>].A, *(*reflect.SliceHeader)(unsafe.Pointer(&amp;dest[<span class=\"number\">0</span>].A)))&#125;<span class=\"comment\">/*outputsrc       (addr: 0xc0000a6020): &#123;Data:824634311040 Len:       1 Cap:       1&#125;dest      (addr: 0xc0000a6040): &#123;Data:824634311088 Len:       1 Cap:       1&#125;src[0].A  (addr: 0xc000090180): &#123;Data:824634458120 Len:       1 Cap:       1&#125;dest[0].A (addr: 0xc0000901b0): &#123;Data:824634458120 Len:       1 Cap:       1&#125;*/</span></span><br></pre></td></tr></table></figure>\n<p> <br>\n虽然对<code>src</code>进行了深拷贝，但是<code>src</code>和<code>dest</code>中A和B指向了同一个地址空间，因此针对复杂类型的slice，需要自定义深拷贝方法。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> S <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tA []<span class=\"type\">int</span></span><br><span class=\"line\">\tB []<span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s S)</span></span> deepCopy() S &#123;</span><br><span class=\"line\">\tdest := S&#123;</span><br><span class=\"line\">\t\tA: <span class=\"built_in\">make</span>([]<span class=\"type\">int</span>, <span class=\"built_in\">len</span>(s.A)),</span><br><span class=\"line\">\t\tB: <span class=\"built_in\">make</span>([]<span class=\"type\">string</span>, <span class=\"built_in\">len</span>(s.B)),</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">copy</span>(dest.A, s.A)</span><br><span class=\"line\">\t<span class=\"built_in\">copy</span>(dest.B, s.B)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> dest</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> src = []S&#123;&#123;A: []<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>&#125;, B: []<span class=\"type\">string</span>&#123;<span class=\"string\">&quot;B&quot;</span>&#125;&#125;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> dest = <span class=\"built_in\">make</span>([]S, <span class=\"number\">1</span>)</span><br><span class=\"line\">\tdest[<span class=\"number\">0</span>] = src[<span class=\"number\">0</span>].deepCopy()</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;src       (addr: %p): %+8v\\n&quot;</span>,\t&amp;src, *(*reflect.SliceHeader)(unsafe.Pointer(&amp;src)))fmt.Printf(<span class=\"string\">&quot;dest      (addr: %p): %+8v\\n&quot;</span>,\t&amp;dest, *(*reflect.SliceHeader)(unsafe.Pointer(&amp;dest)))fmt.Printf(<span class=\"string\">&quot;src[0].A  (addr: %p): %+8v\\n&quot;</span>,\t&amp;src[<span class=\"number\">0</span>].A, *(*reflect.SliceHeader)(unsafe.Pointer(&amp;src[<span class=\"number\">0</span>].A)))fmt.Printf(<span class=\"string\">&quot;dest[0].A (addr: %p): %+8v\\n&quot;</span>,\t&amp;dest[<span class=\"number\">0</span>].A, *(*reflect.SliceHeader)(unsafe.Pointer(&amp;dest[<span class=\"number\">0</span>].A)))</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*output</span></span><br><span class=\"line\"><span class=\"comment\">src       (addr: 0xc0000a6020): &#123;Data:824634311040 Len:       1 Cap:       1&#125;</span></span><br><span class=\"line\"><span class=\"comment\">dest      (addr: 0xc0000a6040): &#123;Data:824634311088 Len:       1 Cap:       1&#125;</span></span><br><span class=\"line\"><span class=\"comment\">src[0].A  (addr: 0xc000090180): &#123;Data:824634458120 Len:       1 Cap:       1&#125;</span></span><br><span class=\"line\"><span class=\"comment\">dest[0].A (addr: 0xc0000901b0): &#123;Data:824634458128 Len:       1 Cap:       1&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>可以看到，src[0].A和dest[0].B指向了不同的地址空间## 清空slice方法1</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">govar s = []int&#123;1,2,3&#125;s = nil // GC机制自动回收fmt.Println(s, len(s), cap(s)) // [], 0, 0s1 = s1[:0]</span><br></pre></td></tr></table></figure>\n<p>方法2</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s1 = []<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;fmt.Println(s1, <span class=\"built_in\">len</span>(s1), <span class=\"built_in\">cap</span>(s1)) <span class=\"comment\">// [], 0, 3</span></span><br></pre></td></tr></table></figure>\n<p>根据需求，如果还需要继续使用slice底层内存，就选择方法2</p>\n<h2 id=\"range中修改元素\">range中修改元素<a title=\"#range中修改元素\" href=\"#range中修改元素\"></a></h2>\n<p>根据不同的使用方式，range的实现原理如下：<br>\n<strong>场景1</strong> <code>for index, value := range s &#123;&#125;</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// The loop we generate:   for_temp := range   len_temp := len(for_temp)   for index_temp = 0; index_temp &lt; len_temp; index_temp++ &#123;           value_temp = for_temp[index_temp]           index = index_temp           value = value_temp           original body   &#125;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>遍历时已经确定了index的范围(0,1,2,…,len_temp)<br>\n遍历时会将slice赋值给临时变量(for_temp)</p>\n</blockquote>\n<p><strong>场景2</strong> <code>for index := range s &#123;&#125;</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// The loop we generate:   len_temp := len(for_temp)   for index_temp = 0; index_temp &lt; len_temp; index_temp++ &#123;           index = index_temp           original body   &#125;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>遍历时已经确定了index的范围(0,1,2,…,len_temp)</p>\n</blockquote>\n<p>针对<code>for index, value := range s &#123;&#125;</code>的场景，我们看下slice赋值的时候发生了什么？<br>\n<img src=\"D:%5Cwork%5C%E5%B7%A5%E4%BD%9C%E6%96%87%E4%BB%B6%5C%E5%AD%A6%E4%B9%A0%E6%96%87%E4%BB%B6%5Cgo%E5%AD%A6%E4%B9%A0%5Cmedia%5C16195168657744.jpg\" alt=\"\" loading=\"lazy\"></p>\n<p>图对对应的代码如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;\t<span class=\"keyword\">var</span> s = []<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;\t<span class=\"keyword\">var</span> d = s\tfmt.Printf(<span class=\"string\">&quot;s (addr: %p): %+8v\\n&quot;</span>,\t\t&amp;s, *(*reflect.SliceHeader)(unsafe.Pointer(&amp;s)))\tfmt.Printf(<span class=\"string\">&quot;d (addr: %p): %+8v\\n&quot;</span>,\t\t&amp;d, *(*reflect.SliceHeader)(unsafe.Pointer(&amp;d)))\tfmt.Println(<span class=\"string\">&quot;----------------------------------&quot;</span>)\ts = s[:<span class=\"number\">2</span>]\tfmt.Printf(<span class=\"string\">&quot;s (addr: %p): %+8v\\n&quot;</span>,\t\t&amp;s, *(*reflect.SliceHeader)(unsafe.Pointer(&amp;s)))\tfmt.Printf(<span class=\"string\">&quot;d (addr: %p): %+8v\\n&quot;</span>,\t\t&amp;d, *(*reflect.SliceHeader)(unsafe.Pointer(&amp;d)))&#125;<span class=\"comment\">/*outputs (addr: 0xc00000c060): &#123;Data:824633811360 Len:       3 Cap:       3&#125;d (addr: 0xc00000c080): &#123;Data:824633811360 Len:       3 Cap:       3&#125;----------------------------------s (addr: 0xc00000c060): &#123;Data:824633811360 Len:       2 Cap:       3&#125;d (addr: 0xc00000c080): &#123;Data:824633811360 Len:       3 Cap:       3&#125;*/</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>赋值之后s和d是两个变量，但是指向了同一个地址空间. 修改s(不修改data)，不会影响d</p>\n</blockquote>\n<p>根据上述原理，我们看几个例子</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;\t<span class=\"keyword\">var</span> s = []<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;\t<span class=\"keyword\">for</span> index := <span class=\"keyword\">range</span> s &#123;\t\t<span class=\"keyword\">if</span> s[index] == <span class=\"number\">2</span> &#123;\t\t\ts = s[:<span class=\"number\">2</span>]\t\t&#125;\t\t_ = s[index]\t&#125;&#125;<span class=\"comment\">/*代码符合场景2，代码会直接panic，遍历时指向的是原有的s，此时s的长度变成了2，当index=2时会引起panic*/</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;\t<span class=\"keyword\">var</span> s = []<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;\t<span class=\"keyword\">for</span> index, value := <span class=\"keyword\">range</span> s &#123;\t\t<span class=\"keyword\">if</span> value == <span class=\"number\">2</span> &#123;\t\t\ts = s[:<span class=\"number\">2</span>]\t\t&#125;\t\tfmt.Println(index, value)\t&#125;&#125;<span class=\"comment\">/*0 11 22 3*/</span><span class=\"comment\">// 代码符合场景1，因为内部已经拷贝了s为for_temp(len=3)，s=s[:2]不会改变for_temp, 因此可以遍历到原s的所有值</span></span><br></pre></td></tr></table></figure>\n<p>如果上述原理已经理解，则如下代码的输出应该能够很快给出</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// T1 测试遍历slice的时候，动态append的影响</span></span><br><span class=\"line\"><span class=\"comment\">/*output</span></span><br><span class=\"line\"><span class=\"comment\">[1 2 1 2 1 2 1 2]</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">T1</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> s = []<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> <span class=\"keyword\">range</span> s &#123;</span><br><span class=\"line\">\t\ts = <span class=\"built_in\">append</span>(s, s...)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(s)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// T2 测试遍历slice的时候，动态append的影响</span></span><br><span class=\"line\"><span class=\"comment\">/*output</span></span><br><span class=\"line\"><span class=\"comment\">[1 2 1 2]</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">T2</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> s = []<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> index := <span class=\"keyword\">range</span> s &#123;</span><br><span class=\"line\">\t\ts = <span class=\"built_in\">append</span>(s, s[index])</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(s)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// for index := range s &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// T3 测试如上的遍历方式下，动态删除数组元素的影响</span></span><br><span class=\"line\"><span class=\"comment\">/*output</span></span><br><span class=\"line\"><span class=\"comment\">1</span></span><br><span class=\"line\"><span class=\"comment\">3</span></span><br><span class=\"line\"><span class=\"comment\">panic</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">T3</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> s = []<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> index := <span class=\"keyword\">range</span> s &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> index == <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\t\ts = <span class=\"built_in\">append</span>(s[:index], s[index+<span class=\"number\">1</span>:]...)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tfmt.Println(s[index])</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// for index, value := range s &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// T4 测试如上的遍历方式下，动态删除数组元素的影响</span></span><br><span class=\"line\"><span class=\"comment\">/*output</span></span><br><span class=\"line\"><span class=\"comment\">1</span></span><br><span class=\"line\"><span class=\"comment\">3</span></span><br><span class=\"line\"><span class=\"comment\">panic</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">T4</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> s = []<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> index, value := <span class=\"keyword\">range</span> s &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> value == <span class=\"number\">2</span> &#123;</span><br><span class=\"line\">\t\t\ts = <span class=\"built_in\">append</span>(s[:index], s[index+<span class=\"number\">1</span>:]...)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tfmt.Println(s[index])</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// for index, value := range s &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// T5 测试如上的遍历方式下，动态删除数组元素的影响</span></span><br><span class=\"line\"><span class=\"comment\">/*output</span></span><br><span class=\"line\"><span class=\"comment\">1</span></span><br><span class=\"line\"><span class=\"comment\">2</span></span><br><span class=\"line\"><span class=\"comment\">3</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">T5</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> s = []<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> index, value := <span class=\"keyword\">range</span> s &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> value == <span class=\"number\">2</span> &#123;</span><br><span class=\"line\">\t\t\ts = <span class=\"built_in\">append</span>(s[:index], s[index+<span class=\"number\">1</span>:]...)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tfmt.Println(value)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// for index, value := range s &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// T6 测试如上的遍历方式下，动态修改s</span></span><br><span class=\"line\"><span class=\"comment\">/*output</span></span><br><span class=\"line\"><span class=\"comment\">1</span></span><br><span class=\"line\"><span class=\"comment\">2</span></span><br><span class=\"line\"><span class=\"comment\">3</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">T6</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> s = []<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> index, value := <span class=\"keyword\">range</span> s &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> index == <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\t\ts = []<span class=\"type\">int</span>&#123;<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tfmt.Println(value)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// for index, value := range s &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// T7 测试如上的遍历方式下，动态删除数组元素的影响</span></span><br><span class=\"line\"><span class=\"comment\">/*output</span></span><br><span class=\"line\"><span class=\"comment\">1 1</span></span><br><span class=\"line\"><span class=\"comment\">10 2</span></span><br><span class=\"line\"><span class=\"comment\">3 3</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">T7</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> s = []<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> index, value := <span class=\"keyword\">range</span> s &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> index == <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\t\ts[index] = <span class=\"number\">10</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tfmt.Println(s[index], value)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"优化建议\">优化建议<a title=\"#优化建议\" href=\"#优化建议\"></a></h2>\n<h3 id=\"建议1\">建议1<a title=\"#建议1\" href=\"#建议1\"></a></h3>\n<p>如果非常明确数组的大小，则应该采用如下的方式声明，避免：</p>\n<ol>\n<li>防止append时多次申请内存并减低GC压力；</li>\n<li>防止大小不固定引起的内存漂移；</li>\n</ol>\n<p>建议的方式：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = []<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> d = <span class=\"built_in\">make</span>([]<span class=\"type\">string</span>, <span class=\"built_in\">len</span>(s)) <span class=\"comment\">// 一次性分配连续内存；栈上分配内存，无需GC</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> index ：= <span class=\"keyword\">range</span> s &#123;</span><br><span class=\"line\">    d[index] = <span class=\"string\">&quot;any&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>不建议的方式：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = []<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> d = <span class=\"built_in\">make</span>([]<span class=\"type\">string</span>, <span class=\"number\">0</span>) <span class=\"comment\">// 编译阶段无法确定大小，内存漂移到堆上，需要GC</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"keyword\">range</span> s &#123;</span><br><span class=\"line\">    d = <span class=\"built_in\">append</span>(d, <span class=\"string\">&quot;any&quot;</span>) <span class=\"comment\">// 每次append都会引起新的内存分配以及老的内存回收</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"建议2\">建议2<a title=\"#建议2\" href=\"#建议2\"></a></h3>\n<p>遍历方式的优化</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 建议的方式，避免值拷贝</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> index := <span class=\"keyword\">range</span> s&#123;</span><br><span class=\"line\">    _ = s[index]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 不建议的方式</span></span><br><span class=\"line\"><span class=\"comment\">// value在内部进行了一次值拷贝</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> _, value := <span class=\"keyword\">range</span> s&#123;</span><br><span class=\"line\">    _ = value</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","prev":{"title":"生活笔记","link":"2022/01/12/mylife/生活笔记"},"next":{"title":"《架构整洁之道》读书笔记","link":"2022/01/12/mylife/《架构整洁之道》读书笔记"},"plink":"https://liuzy.love/2022/01/12/go/go笔记/go-切片/","toc":[{"id":"array","title":"array","index":"1"},{"id":"slice","title":"slice","index":"2","children":[{"id":"slice是否是引用传递？","title":"slice是否是引用传递？","index":"2.1"},{"id":"append操作","title":"append操作","index":"2.2"},{"id":"nil与空切片","title":"NIL与空切片","index":"2.3"},{"id":"切片","title":"切片","index":"2.4"},{"id":"浅拷贝和深拷贝","title":"浅拷贝和深拷贝","index":"2.5","children":[{"id":"浅拷贝","title":"浅拷贝","index":"2.5.1"},{"id":"深拷贝","title":"深拷贝","index":"2.5.2"}]},{"id":"range中修改元素","title":"range中修改元素","index":"2.6"},{"id":"优化建议","title":"优化建议","index":"2.7","children":[{"id":"建议1","title":"建议1","index":"2.7.1"},{"id":"建议2","title":"建议2","index":"2.7.2"}]}]}]}